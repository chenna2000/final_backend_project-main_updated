forms.py code:
=============
class LoginForm1(forms.Form):
    official_email = forms.EmailField(required=True)
    password = forms.CharField(widget=forms.PasswordInput, required=True)


views.py code:
=============
import json
from django.contrib.auth import authenticate
from django.http import JsonResponse
from django.views import View
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from rest_framework.authtoken.models import Token
from .forms import LoginForm

def generate_token(user):
    token= Token.objects.get_or_create(user=user)
    return token.key

@method_decorator(csrf_exempt, name='dispatch')
class LoginCompanyInChargeView(View):
    def post(self, request):
        try:
            data = json.loads(request.body.decode('utf-8'))
            form = LoginForm1(data)

            if form.is_valid():
                email = form.cleaned_data['official_email']
                password = form.cleaned_data['password']
                user = authenticate(request, username=email, password=password)

                if user is not None:
                    token = generate_token(user)
                    return JsonResponse({'success': True, 'token': token}, status=200)
                else:
                    return JsonResponse({'success': False, 'errors': 'Invalid email or password'}, status=401)
            else:
                errors = dict(form.errors.items())
                print(form.errors)
                return JsonResponse({'success': False, 'errors': errors}, status=400)

        except json.JSONDecodeError:
            return JsonResponse({'success': False, 'errors': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'success': False, 'errors': str(e)}, status=500)


@method_decorator(csrf_exempt, name='dispatch')
class LoginUniversityInChargeView(View):
    def post(self, request):
        try:
            data = json.loads(request.body.decode('utf-8'))
            form = LoginForm1(data)

            if form.is_valid():
                email = form.cleaned_data['official_email']
                password = form.cleaned_data['password']
                user = authenticate(request, username=email, password=password)

                if user is not None:
                    token = generate_token(user)
                    return JsonResponse({'success': True, 'token': token}, status=200)
                else:
                    return JsonResponse({'success': False, 'errors': 'Invalid email or password'}, status=401)
            else:
                errors = dict(form.errors.items())
                return JsonResponse({'success': False, 'errors': errors}, status=400)

        except json.JSONDecodeError:
            return JsonResponse({'success': False, 'errors': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'success': False, 'errors': str(e)}, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class LoginConsultantView(View):
    def post(self, request):
        try:
            data = json.loads(request.body.decode('utf-8'))
            form = LoginForm1(data)

            if form.is_valid():
                email = form.cleaned_data['official_email']
                password = form.cleaned_data['password']
                user = authenticate(request, username=email, password=password)

                if user is not None:
                    token = generate_token(user)
                    return JsonResponse({'success': True, 'token': token}, status=200)
                else:
                    return JsonResponse({'success': False, 'errors': 'Invalid email or password'}, status=401)
            else:
                errors = dict(form.errors.items())
                return JsonResponse({'success': False, 'errors': errors}, status=400)

        except json.JSONDecodeError:
            return JsonResponse({'success': False, 'errors': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'success': False, 'errors': str(e)}, status=500)

postman Endpoints:
=================
 path('login/company/', views.LoginCompanyInChargeView.as_view(), name='login_company'),
 path('login/university/', views.LoginUniversityInChargeView.as_view(), name='login_university'),
 path('login/consultant/', views.LoginConsultantView.as_view(), name='login_consultant'),
http://127.0.0.1:8000/login/company/(PPOST METHOD)

same for consultant and unverisities also

BODY:
====
{
  "official_email": "peddarapuc2@gmail.com",
  "password": "Chenna@99595"
}

 body same for consultant and unverisities also